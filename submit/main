#!/usr/bin/env python
# -*- coding: utf-8 -*-
# orakel debakel - the revenge

import sys
import random
import cPickle as pickle
import db
import random

DEBUG = 1

class Main:
    def __init__(self):
        self.pred = Predictor()
        self.data = db.Data()

    def main(self):
      # sys args
      if len(sys.argv) != 3:
         print 'Usage: ' + sys.argv[0] + ' --predict <gameday> < input'
         print 'Usage: ' + sys.argv[0] + ' --verify <gameday> < input'
         sys.exit(1)
      else:
         mode = sys.argv[1]
         gameday = int(sys.argv[2])

      input = sys.stdin.readlines()

      if mode == '--predict':
         # calculate every match
         for i in input:
            match = i.strip('\n').split(' ')
            self.generate_prediction(match)

      # verify last gameday and enter scores to database
      elif mode == '--verify':
         for i in input:
             match = i.strip('\n')
             self.new_scores(match, gameday)

      else:
         print >> sys.stderr, '\033[1;31mError:\033[1;m Arguments not recognized.'


    def generate_prediction(self, teams):
        pair = [int(t) for t in teams]
        self.pred.predict(pair)

    # add new scores and recalculate the stats
    def new_scores(self, line, gameday):
        if self.data.insert_data(line, gameday):
            self.data.pickle()
        else:
            print >> sys.stderr, '\033[1;31mError:\033[1;m This match is already inserted.'

class Predictor:
    def __init__(self):
        self.d = db.Data()
        self.meta = db.Meta()
        self.current_year = self.meta.current_year

        self.pres = [[0,0], [1,0], [0,1], [1,1], [2,0], [2,1], [1,2], [0,2], [2,2], [3,0], [0,3], [3,1], [1,3], [3,2], [2,3]]
        self.pres_home = [[0,0], [1,0], [1,1], [2,0], [2,1], [2,2]]
        self.pres_away = [[0,0], [0,1], [1,1], [0,2], [1,2], [2,2]]
        self.pres_win = [[1,0], [2,0], [2,1], [3,0], [3,1], [3,2]]


    # bisher der beste, aber zuviel random
    def predict(self, teams):
        t1, t2 = teams[0], teams[1]

        # ratio is the shit!
        cmpr = self.d.compare_teams(t1, t2, 3, 2.0)
        if cmpr == 1:
            res = random.sample(self.pres_home, 1)[0]
        elif cmpr == -1:
            res = random.sample(self.pres_away, 1)[0]
        else:
            res = random.sample([[0,0], [1,1]], 1)[0]
        
        self.print_scores(t1, t2, res)            

        
    def print_scores(self, t1, t2, score):
        print t1, t2, score[0], score[1]


if __name__ == '__main__':
   m = Main()
   m.main()
